#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/* Base */

#define b 0

/* Navigation */

#define n 1

/* Symbols */

#define s 2

/* Numbers */

#define u 3

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <200>;
    require-prior-idle-ms = <150>;
};

/ {
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <b u>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <s>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <12>;
    };

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <n>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        scale-divisor = <6>;
        bindings = <&ib_wheel_scaler 1 8>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        ltn: layer_tap_none {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_NONE";
            bindings = <&mo>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hl: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };

        hr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
            hold-trigger-on-release;
        };
    };

    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <35>;
            key-positions = <22 23>;
            bindings = <&kp ESCAPE>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_lbkt {
            timeout-ms = <45>;
            key-positions = <1 11>;
            bindings = <&kp LBKT>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_lpar {
            timeout-ms = <45>;
            key-positions = <2 12>;
            bindings = <&kp LPAR>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_lbrc {
            timeout-ms = <45>;
            key-positions = <3 13>;
            bindings = <&kp LBRC>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_lt {
            timeout-ms = <45>;
            key-positions = <4 14>;
            bindings = <&kp LT>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_gt {
            timeout-ms = <45>;
            key-positions = <5 15>;
            bindings = <&kp GT>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_rbrc {
            timeout-ms = <45>;
            key-positions = <6 16>;
            bindings = <&kp RBRC>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_rpar {
            timeout-ms = <45>;
            key-positions = <7 17>;
            bindings = <&kp RPAR>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_rbkt {
            timeout-ms = <45>;
            key-positions = <8 18>;
            bindings = <&kp RBKT>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_rl_leftclk {
            timeout-ms = <40>;
            key-positions = <17 18>;
            bindings = <&mkp LCLK>;
            require-prior-idle-ms = <150>;
            layers = <0 3 2 1>;
        };

        combo_rl_middleclk {
            timeout-ms = <40>;
            key-positions = <17 27>;
            bindings = <&mkp MCLK>;
            require-prior-idle-ms = <150>;
            layers = <0 3 2 1>;
        };

        combo_rl_rightclk {
            timeout-ms = <40>;
            key-positions = <18 28>;
            bindings = <&mkp RCLK>;
            require-prior-idle-ms = <150>;
            layers = <0 3 2 1>;
        };

        combo_capsword {
            timeout-ms = <40>;
            key-positions = <2 7>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        combo_capslock {
            timeout-ms = <40>;
            key-positions = <1 8>;
            bindings = <&kp CAPS>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &kp Q       &kp W       &kp E         &kp R        &kp T            &kp Y    &kp U        &kp I        &kp O       &kp P
  &hl LGUI A  &hl LALT S  &hl LCTRL D   &hl LSHFT F  &kp G            &kp H    &hr RSHFT J  &hr RCTRL K  &hr RALT L  &hr RGUI SEMICOLON
  &lt 4 Z     &kp X       &kp C         &kp V        &kp B            &kp N    &kp M        &kp COMMA    &kp DOT     &lt 4 SLASH
                          &lt 3 ESCAPE  &lt 2 SPACE  &kp BACKSPACE    &kp TAB  &lt 1 ENTER
            >;
        };

        Numbers {
            bindings = <
  &trans        &kp F7           &kp F8        &kp F9         &kp F12    &trans  &kp N7        &kp N8        &kp N9       &trans
  &kp LEFT_GUI  &hl LEFT_ALT F4  &hl LCTRL F5  &hl LSHIFT F6  &kp F11    &trans  &hr RSHFT N4  &hr RCTRL N5  &hr RALT N6  &kp LEFT_GUI
  &trans        &kp F1           &kp F2        &kp F3         &kp F10    &trans  &kp N1        &kp N2        &kp N3       &kp N0
                                 &trans        &trans         &kp DEL    &trans  &trans
            >;
        };

        Symbols {
            bindings = <
  &trans         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GRAVE          &trans    &trans  &kp AMPS   &kp STAR   &kp PLUS   &kp TILDE
  &kp PIPE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SINGLE_QUOTE   &trans    &trans  &kp DLLR   &kp PRCNT  &kp CARET  &kp MINUS
  &kp BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &trans    &trans  &kp EXCL   &kp AT     &kp HASH   &kp UNDER
                                       &trans                 &trans             &trans    &trans  &kp EQUAL
            >;
        };

        Navigation {
            bindings = <
  &trans    &trans       &trans         &trans     &trans    &trans      &trans      &trans     &trans    &trans
  &kp LEFT  &kp UP       &kp DOWN       &kp RIGHT  &trans    &trans      &kp RSHFT   &kp RCTRL  &kp RALT  &kp RGUI
  &kp HOME  &kp PAGE_UP  &kp PAGE_DOWN  &kp END    &trans    &trans      &trans      &trans     &trans    &trans
                         &trans         &trans     &trans    &kp K_PREV  &kp K_NEXT
            >;
        };

        Mouse {
            bindings = <
  &trans  &trans  &trans    &trans    &trans      &trans    &trans    &trans  &trans  &trans
  &trans  &trans  &trans    &trans    &trans      &trans    &trans    &trans  &trans  &trans
  &trans  &trans  &trans    &trans    &trans      &trans    &trans    &trans  &trans  &trans
                  &mkp MB2  &mkp MB1  &mkp MB3    &mkp MB3  &mkp MB1
            >;
        };
    };
};
